# -*- coding: UTF-8 -*-
#
# frendyxzc@126.com
# 2017.08.28

import argparse
import os
import os.path
import time

from find import findFiles, findColors, findRedundantColor, contain, containPath, containOne


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--rootdir', type=str, default='.',
                       help='指定根目录')
    parser.add_argument('--type', type=str, default='rm',
                       help=u'命令类型 [rm, svn]，默认是直接删除文件，指定 svn 则调用 svn del')
    parser.add_argument('--target', type=str, default='all',
                       help=u'清理对象 [all, image, color, drawable]')
    args = parser.parse_args()
    return args


def cleanImage(images, files):
    startTime = time.time()
    cnt = 0

    for image in images:
        isUsed = False

        for file in files:
            if(containPath(image, file)):
                isUsed = True
                #print("++ Used : %s, %s" % (image, file))
                continue

        if isUsed == False:
            cnt += 1
            print(">> Redundant : " + image)

            if args.type == "svn":
                os.system("svn del " + image)
            else:
                os.remove(image)

    endTime = time.time()
    print("== It take %d second to delete %d redundant images.." % ((endTime - startTime), cnt))

def cleanColor(colors, files):
    startTime = time.time()

    COLOR_XML_FILE, COLOR_REDUNDANT, CNT = findRedundantColor(colors, files)

    for file in COLOR_XML_FILE:
        with open(file, "r", encoding="utf-8") as f:
            lines = f.readlines()

        with open(file, "w", encoding="utf-8") as fw:
            for line in lines:
                if containOne(COLOR_REDUNDANT, line):
                    continue
                fw.write(line)

    endTime = time.time()
    print("== It take %d second to delete %d redundant colors.." % ((endTime - startTime), CNT))

def cleanDrawable(drawables, files):
    startTime = time.time()
    cnt = 0

    for drawable in drawables:
        isUsed = False

        for file in files:
            if(containPath(drawable, file)):
                isUsed = True
                #print("++ Used : %s, %s" % (drawable, file))
                continue

        if isUsed == False:
            cnt += 1
            print(">> Redundant : " + drawable)

            if args.type == "svn":
                os.system("svn del " + drawable)
            else:
                os.remove(drawable)

    endTime = time.time()
    print("== It take %d second to delete %d redundant drawables.." % ((endTime - startTime), cnt))

if __name__ == '__main__':
    args = parse_args()

    IMAGE, FILE, COLOR_FILE, DRAWABLE = findFiles(args.rootdir)

    if args.target == "image":
        print("** Find Files : %d" % len(FILE))
        print("** Find Images : %d" % len(IMAGE))
        cleanImage(IMAGE, FILE)

    elif args.target == "color":
        COLOR = findColors(COLOR_FILE)
        print("** Find Files : %d" % len(FILE))
        print("** Find Colors : %d" % len(COLOR))
        cleanColor(COLOR, FILE)

    elif args.target == "drawable":
        print("** Find Files : %d" % len(FILE))
        print("** Find Drawables : %d" % len(DRAWABLE))
        cleanDrawable(DRAWABLE, FILE)

    else:
        COLOR = findColors(COLOR_FILE)
        print("** Find Files : %d" % len(FILE))
        print("** Find Images : %d" % len(IMAGE))
        print("** Find Drawables : %d" % len(DRAWABLE))
        print("** Find Colors : %d" % len(COLOR))
        cleanImage(IMAGE, FILE)
        cleanDrawable(DRAWABLE, FILE)
        cleanColor(COLOR, FILE)
